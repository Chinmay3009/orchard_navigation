import json
import utm
from scipy.optimize import linear_sum_assignment
import numpy as np
import matplotlib.pyplot as plt


# Matching function for ground truths and predictions
def match_gts_preds(gts, preds, gating=0.5):
    cost_matrix = np.array([[np.linalg.norm(np.array(gt) - np.array(pred)) for pred in preds] for gt in gts])
    rows, cols = linear_sum_assignment(cost_matrix)
    distances = []
    unmatched_gts = []
    unmatched_preds = []
    for row, col in zip(rows, cols):
        gt_point = np.array(gts[row])
        pred_point = np.array(preds[col])
        distance = np.linalg.norm(gt_point - pred_point)
        if cost_matrix[row, col] < gating:
            distances.append(distance)
        else:
            unmatched_gts.append(row)
            unmatched_preds.append(col)
    
    unmatched_gts += list(set(range(len(gts))) - set(rows))
    unmatched_preds += list(set(range(len(preds))) - set(cols))
    
    return np.array(distances), rows, cols, unmatched_gts, unmatched_preds

# Visualization function for error graph
def plot_error_graph(gts, map_json_path, gating=0.5):
    # Load predictions from JSON file
    with open(map_json_path, 'r') as json_file:
        data = json.load(json_file)

    trees_pred = data["trees"]
    preds = [tree["tree_pos"] for tree in trees_pred.values()]

    # Match ground truths to predictions
    cost_matrix = np.array([[np.linalg.norm(np.array(gt) - np.array(pred)) for pred in preds] for gt in gts])
    rows, cols = linear_sum_assignment(cost_matrix)
    
    distances = []
    matched_rows = []  # Track ground truth indices
    matched_cols = []  # Track prediction indices

    for row, col in zip(rows, cols):
        distance = cost_matrix[row, col]
        if distance < gating:  # Apply gating threshold
            distances.append(distance)
            matched_rows.append(row)  # Only include rows within gating
            matched_cols.append(col)

    # Prepare data for plotting
    sorted_indices = np.argsort(matched_rows)  # Sort by ground truth tree index
    sorted_tree_numbers = np.array(matched_rows)[sorted_indices]
    sorted_errors = np.array(distances)[sorted_indices]

    # Plot error graph
    plt.figure(figsize=(12, 6))
    plt.plot(sorted_tree_numbers, sorted_errors, marker='o', linestyle='-', color='tab:blue', label="Error per Tree")
    plt.xlabel("Tree Number")
    plt.ylabel("Euclidean Distance Error [m]")
    plt.title("Individual Tree Errors")
    plt.grid(True, linestyle='--', alpha=0.5)
    plt.legend(loc="upper left")
    plt.show()

# Define the ground truth for complete map
ground_truth_trees = [
    (0.014421354863763012, 0.21154744778013726),
    (3.0741847993157614, -0.021687597334732273),
    (5.576217381205451, -0.14078215264294874),
    (8.734042053211573, -0.09730231246930317),
    (12.048010137112426, -0.030715946992925125),
    (15.232656003114306, -0.09924206921335231),
    (17.748504589185814, 0.3676085289985628),
    (21.283169289930235, 0.15753567675428998),
    (24.03234521153567, 0.09821779457792754),
    (26.891724537763572, 0.17583041591237392),
    (0.17846387888043935, 8.201359516254993),
    (3.1760884474340143, 7.7232581981291855),
    (5.748325325400836, 7.728195103285345),
    (9.118636988282718, 8.120436144904726),
    (11.895272994414956, 7.624144408563217),
    (14.844602257129694, 8.020931693717817),
    (18.00549880958844, 7.727515281884903),
    (20.990834518882142, 7.849055805300163),
    (23.910722671516584, 7.892107675187382),
    (27.166990889918182, 8.128680009177785),
    (0.31861120354601175, 15.731674187140408),
    (3.417746971710846, 15.917057366786219),
    (5.742353990250437, 16.004475235263914),
    (8.917790126627647, 16.275570842036295),
    (11.689063293772984, 15.980022074662465),
    (15.328309471888558, 15.989321878544914),
    (17.75024919065272, 15.979705986615988),
    (20.742784487298373, 16.300247174924994),
    (24.210879145677747, 15.960996533592452),
    (27.297806661895816, 16.134315691533175),
    (0.05030255067605297, 23.99161150473773),
    (2.843300345866609, 24.187847703030414),
    (5.837201387185281, 24.007042914630322),
    (8.805131207255092, 23.979906303856676),
    (11.813746786560278, 23.85233111611666),
    (15.152507496573628, 23.935976116422008),
    (17.93892899309443, 23.93475419409461),
    (20.97420946178162, 24.084857548134963),
    (24.158498684612812, 24.216907793473005),
    (26.845888776342875, 24.388908308640854),
    (-0.22413669553800936, 31.855867176820926),
    (2.9460441878581944, 32.1007702272476),
    (6.102060981705804, 32.40561057005954),
    (8.980260188510572, 32.065674306754815),
    (12.1319722926213, 31.835205219346204),
    (15.213485698064494, 32.195428360564954),
    (18.04870266016129, 32.44370167536219),
    (20.973819126074908, 31.752914204789462),
    (24.205386407369772, 32.05431571650544),
    (27.197099729569818, 32.1798851763571),
    (-0.4545163765846916, 39.65233331713025),
    (2.6776752163617785, 40.085437491621484),
    (6.041608238851408, 39.86262524884959),
    (9.038067276322112, 40.13601740680807),
    (11.843003188585342, 40.062060082705166),
    (14.954456057978057, 39.85942508723563),
    (17.518818125733198, 39.78664081483005),
    (21.078538042237245, 39.565454091338964),
    (23.90240307905817, 39.70987250939307),
    (26.79321824260345, 40.093788113752616),
    (0.002570257613722598, 47.86570017603378),
    (3.015293088918497, 47.93273832862709),
    (6.132554065487327, 48.068426177515754),
    (8.83060797445914, 48.06493168617683),
    (12.154371079182315, 47.80765270978497),
    (15.2224848244806, 47.88410178690675),
    (18.084613746982548, 47.95840802996755),
    (21.20707537152257, 47.895435040102186),
    (23.710329211135715, 48.12994510592445),
    (26.980921015717875, 48.0962371182453),
    (0.13921487107954494, 55.880220071910024),
    (3.0675190987058887, 56.17112787526484),
    (5.87230241569444, 55.86638762911267),
    (8.991469745954724, 56.063734100537644),
    (12.262674903789662, 55.994307123148076),
    (14.908334700704343, 56.01081966755644),
    (18.03982146325987, 55.89634435222406),
    (21.186139935353754, 56.06340879462118),
    (23.78475451595698, 56.07109585767878),
    (26.93015737467028, 55.90916137285997),
    (-0.057099715145062235, 64.08129929677006),
    (2.97630934856884, 64.3308725369367),
    (5.604607812516498, 63.703061386141954),
    (8.791353933908422, 63.77306075964716),
    (12.185054641092629, 63.813876120272326),
    (15.037816164538617, 63.68849955511513),
    (17.996527053420476, 64.04819691912881),
    (21.274349322900292, 63.989288948388094),
    (23.995791664187756, 64.0524650203552),
    (27.177137301614884, 64.02976229703305),
    (-0.1410886221111874, 71.93381502702351),
    (3.0906480107938963, 72.26027382683588),
    (6.027626235421809, 71.79512470494532),
    (9.020393641268392, 72.11783927626317),
    (12.015567654742611, 71.84501410960799),
    (14.895657944394058, 71.6501841048018),
    (17.9477740932696, 72.47223391209587),
    (20.76572336499019, 72.16936281452124),
    (24.365335258885185, 71.90674447333613),
    (27.14108005637431, 71.94587414494057)
]


# Define the ground truth for missing trees
# ground_truth_trees = [
#     (-0.1127393780924963, -0.18454049256538818),
#     (3.170790080403418, -0.04445514934627675),
#     (5.910502583355186, 0.12725085818200868),
#     (8.898624196290417, -0.24067229010859303),
#     (11.996917167150961, 0.07139477801951814),
#     (14.973906626102577, -0.31398500518544625),
#     (17.994409941903584, 0.5647218529985596),
#     (21.031146391489518, 0.05717997905485089),
#     (24.062306571405475, 0.18525812127441865),
#     (27.069428465517078, 0.033120529674887454),
#     (0.0312619952255819, 8.337084368611407),
#     (3.0075869251200427, 8.314575092594566),
#     (6.121282190033856, 8.30913173664459),
#     (12.037235923664786, 7.655609264224699),
#     (15.003052154855972, 7.995462641534018),
#     (18.010964471042346, 7.743389669833071),
#     (21.036602428542928, 8.212920010205814),
#     (24.161705065134257, 8.288924150787023),
#     (26.92112489828941, 8.592978102258835),
#     (-0.1993374108710128, 15.959393865268352),
#     (3.140725047790646, 15.9374164609636),
#     (6.087178796057877, 16.058576536837332),
#     (9.060053245208692, 16.157189913392514),
#     (11.950804385299303, 15.911055414047894),
#     (15.0157198703987, 15.999045929909805),
#     (18.01613443398214, 16.16536836564175),
#     (20.915591293156304, 15.718321538572589),
#     (23.869272182006465, 15.932507015656078),
#     (27.09984240729161, 15.9694034856064),
#     (0.033075048216724114, 23.940878622645606),
#     (2.8854289610442074, 23.85441654802832),
#     (5.911147495063251, 23.920487778628583),
#     (8.91710550703139, 24.01083264020229),
#     (12.18980355448725, 24.159421938514498),
#     (14.901887164151029, 23.810882459357014),
#     (17.903595486377657, 24.250222024721264),
#     (21.00543951614145, 23.80420122530961),
#     (24.06380658159171, 23.898782421475687),
#     (27.006522422595676, 24.048203336842708),
#     (-0.22203704680101058, 31.910022940405295),
#     (2.9509156097476, 32.21264234180428),
#     (5.908723576170026, 32.186714897145954),
#     (9.033636477220966, 32.18119845879517),
#     (12.025874612231235, 31.911962347271288),
#     (15.06874755913764, 32.1292729567786),
#     (17.997976901673987, 31.958034998867927),
#     (21.0197464981618, 32.03243663455617),
#     (23.905621930165832, 31.81368200943501),
#     (26.84266183940873, 31.956457334911033),
#     (-0.03562130442610535, 39.87747673511258),
#     (3.1060519414173022, 39.952067881907546),
#     (5.94968745493884, 39.767397375044034),
#     (8.977835360878325, 39.654456542446546),
#     (11.945884772787693, 39.80391047610507),
#     (18.012066170189897, 39.58065421932929),
#     (20.857072358481616, 40.080292362646894),
#     (23.914559200276447, 39.93229138545829),
#     (-0.09203799930897477, 47.61278668030559),
#     (2.835911249278307, 47.87993025762776),
#     (6.0383987657865985, 47.75282025241799),
#     (9.01101632606428, 48.112446799764676),
#     (11.918601075421257, 47.958237592576424),
#     (15.105856900534613, 47.73507167701953),
#     (17.97452484527931, 47.98644136342508),
#     (20.89800059551163, 47.8444286882034),
#     (23.984439037301115, 47.729956350096984),
#     (27.007482298868272, 47.77418682922478),
#     (2.98097864404119, 55.99426422630821),
#     (5.90938355193986, 56.05298227548297),
#     (8.954754857238658, 56.03970587227039),
#     (15.069170723953526, 56.02738219473108),
#     (17.94206448901956, 56.168950810370944),
#     (20.842457044709697, 55.842948870035194),
#     (23.92013132703236, 55.678198447021686),
#     (27.044845252263258, 55.8404197128938),
#     (-0.03760218946452976, 64.3872213217862),
#     (3.0136866972881173, 63.862292572511066),
#     (6.217681670054025, 63.78159029559669),
#     (8.920655115163303, 63.97747224431437),
#     (11.953180731679357, 63.95453361524529),
#     (14.936134466025377, 64.17289976537471),
#     (17.96758044937881, 64.09710517357149),
#     (21.005647022572504, 63.68634133913018),
#     (23.78927887752545, 63.84787656683565),
#     (26.99050082821907, 63.95237430499211),
#     (0.018168533425908413, 71.80498509109616),
#     (3.0906480107938963, 72.26027382683588),
#     (6.027626235421809, 71.79512470494532),
#     (9.020393641268392, 72.11783927626317),
#     (12.015567654742611, 71.84501410960799),
#     (14.895657944394058, 71.6501841048018),
#     (17.9477740932696, 72.47223391209587),
#     (20.76572336499019, 72.16936281452124),
#     (24.365335258885185, 71.90674447333613),
#     (27.14108005637431, 71.94587414494057)
# ]


# Define your JSON file path
#map_json_path = "/home/chinmay/second_ros2_ws/src/row_following_pkg/tree_db_missing.json"  # Replace with your JSON file path
map_json_path = "/home/chinmay/second_ros2_ws/src/row_following_pkg/tree_db_2.json"
# Call the function
plot_error_graph(ground_truth_trees, map_json_path, gating=0.5)
